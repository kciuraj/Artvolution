// This code will produce a randomly generated art piece, using the user's name as a seed. 

// Define JavaScript functions at the beginning of the file. 

// Function to generate random values: 
function getRandomValue(max) {
  return Math.floor(Math.random() * Math.floor(max));
}

// Function to generate random colors using the random value generator: 
function generateRandomColor(max) {
  let red = getRandomValue(max);
  let green = getRandomValue(max);
  let blue = getRandomValue(max);
  return `rgb(${red}, ${green}, ${blue})`;
}

// Function to generate random shapes using the random value generator: 
function generateRandomShape(max) {
  let randomShape = getRandomValue(max);
  let shape = '';

  switch (randomShape) {
    case 0: shape = 'circle'; break;
    case 1: shape = 'triangle'; break;
    case 2: shape = 'square'; break;
    case 3: shape = 'rectangle'; break;
    default: throw new Error(`Invalid shape value: ${randomShape}`);
  }

  return shape;
}

// Function to generate a random size for the shapes using the random value generator: 
function generateRandomSize(max) {
  return getRandomValue(max);
}

// Function to generate random positions
function generateRandomPosition(max) {
  let x = getRandomValue(max);
  let y = getRandomValue(max);
  return {
  	x,
  	y
  };
}

// Function to generate colors, shapes, sizes, and positions.
// This function will take the user's name and use it as a seed to generate the random values:
function generateRandomArt(name) {
  const canvasWidth = 500;
  const canvasHeight = 500;
  let seed = 0;
  
  // Generate the seed using the user's name: 
  for (let i = 0; i < name.length; i += 1) {
    seed += name.charCodeAt(i);
  }
  
  // Initialize the random number generator using the seed:
  Math.seedrandom(seed);
  
  // Generate the art:
  let art = [];
  
  for (let i = 0; i < 10; i += 1) {
    let color = generateRandomColor(256);
    let shape = generateRandomShape(4);
    let size = generateRandomSize(50);
    let {x, y} = generateRandomPosition(canvasWidth, canvasHeight);
    
    let element = {
      color,
      shape,
      size,
      position: {
        x,
        y
      }
    };
    
    art.push(element);
  }
  
  // Return the art:
  return art;
}

// Function to draw art onto the canvas using the values generated by the previous function:
function drawArt(art, ctx) {
  art.forEach(element => {
    if (element.shape === 'circle') {
      ctx.fillStyle = element.color;
      ctx.beginPath();
      ctx.arc(element.position.x, element.position.y, element.size, 0, 2 * Math.PI, false);
      ctx.fill();
    } else if (element.shape === 'triangle') {
      ctx.fillStyle = element.color;
      ctx.beginPath();
      ctx.moveTo(element.position.x - (element.size / 2), element.position.y + element.size);
      ctx.lineTo(element.position.x + (element.size / 2), element.position.y + element.size);
      ctx.lineTo(element.position.x, element.position.y - (element.size * 2));
      ctx.fill();
    } else if (element.shape === 'square') {
      ctx.fillStyle = element.color;
      ctx.fillRect(element.position.x - (element.size / 2), element.position.y - (element.size / 2), element.size, element.size);
    } else if (element.shape === 'rectangle') {
      ctx.fillStyle = element.color;
      ctx.fillRect(element.position.x - (element.size), element.position.y - (element.size / 2), element.size * 2, element.size);
    }
  });
}

// Function to create the canvas element and set up the drawing context: 
function createCanvas(width, height) {
  const canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;
  document.body.appendChild(canvas);
  
  // Get the drawing context:
  const ctx = canvas.getContext('2d');
  
  return ctx;
}

// Get the user's name:
const name = prompt('Please enter your name:');

// Generate art:
const art = generateRandomArt(name);

// Create canvas and set up the drawing context:
const ctx = createCanvas(500, 500);

// Draw the art onto the canvas:
drawArt(art, ctx);